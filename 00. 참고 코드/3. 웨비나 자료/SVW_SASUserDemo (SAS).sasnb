[{"kind":1,"language":"markdown","value":"# SAS Viya Workbench Webinar Demo","outputs":[]},{"kind":1,"language":"markdown","value":"## 1. 데이터 탐색","outputs":[]},{"kind":1,"language":"markdown","value":"### 1.1. 기본 설정","outputs":[]},{"kind":2,"language":"sas","value":"libname dmlib '/workspaces/svwdemo/library';","outputs":[]},{"kind":1,"language":"markdown","value":"### 1.2. 데이터 로드","outputs":[]},{"kind":2,"language":"sas","value":"/* (a) CSV 파일 SAS 데이터로 불러오기 */\nproc import out      = dmlib.hmeq                                   /* 입력 데이터 */\n            datafile = \"/workspaces/svwdemo/source/demo_hmeq.csv\"   /* 저장된 파일 경로 */\n            dbms     = csv                                              \n            replace\n            ; \n    getnames     = yes;\n    guessingrows = max;\nrun;\n\n/* (b) 불러온 데이터 확인 */\nproc contents data = dmlib.hmeq order = varnum;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"### 1.3. 데이터 탐색","outputs":[]},{"kind":1,"language":"markdown","value":"#### 1) 값 확인","outputs":[]},{"kind":2,"language":"sas","value":"proc print data = dmlib.hmeq(obs = 20) noobs label;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 2) 분포 확인","outputs":[]},{"kind":1,"language":"markdown","value":"##### (1) 수치형 변수","outputs":[]},{"kind":2,"language":"sas","value":"proc means data = dmlib.hmeq maxdec = 2 n nmiss mean std min max ;\n    var _numeric_;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"##### (2) 범주형 변수","outputs":[]},{"kind":2,"language":"sas","value":"proc freq data = dmlib.hmeq;\n    table sex;\n    table race;\n    table reason;\n    table job;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"## 2. 데이터 처리","outputs":[]},{"kind":1,"language":"markdown","value":"### 2.1. 데이터 분할","outputs":[]},{"kind":2,"language":"sas","value":"proc partition data    = dmlib.hmeq\n               sampct  = 30\n               sampct2 = 30\n               partind \n               \n               ;\n    by bad;\n    output \n        out      = dmlib.hmeq_parted \n        copyvars = (_all_)\n    ;\nrun;\nproc print data = dmlib.hmeq_parted(obs = 5) noobs;\nrun;\nproc freq data = dmlib.hmeq_parted;\n    table _partind_;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"### 2.2. 결측치 처리","outputs":[]},{"kind":1,"language":"markdown","value":"#### 1) 연속형 변수 결측치 처리","outputs":[]},{"kind":1,"language":"markdown","value":"##### (1) 비닝 수행","outputs":[]},{"kind":2,"language":"sas","value":"proc binning data   = dmlib.hmeq_parted(where = (_partind_ = 0))\n             method = tree (\n                           minnbins = 2 \n                           maxnbins = 20\n                           )\n             ;\n    input \n        loan \n        mortdue\n        value\n        yoj\n        derog\n        delinq\n        clage\n        ninq\n        clno\n        debtinc\n        / level = interval\n    ;\n    target\n        bad / level = nominal\n    ;\n    output \n        out      = dmlib.hmeq_train_bined\n        copyvars = (_all_)\n        ;\n    code file  = \"/workspaces/svwdemo/code/bining_code.sas\";\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"##### (2) 평가용 데이터에 비닝 적용","outputs":[]},{"kind":2,"language":"sas","value":"data dmlib.hmeq_valid_bined;\n    set dmlib.hmeq_parted(where = (_partind_ in(1,2)));\n    %include '/workspaces/svwdemo/code/bining_code.sas';\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"##### (3) 데이터 결합","outputs":[]},{"kind":2,"language":"sas","value":"data dmlib.hmeq_comb;\n    set dmlib.hmeq_train_bined\n        dmlib.hmeq_valid_bined\n    ;\nrun;\nproc print data = dmlib.hmeq_comb(obs = 5) noObs label;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 2) 데이터 정리","outputs":[]},{"kind":2,"language":"sql","value":"create table dmlib.hmeq_learn as\nselect id                      label = '고객번호'\n     , sex                     label = '성별'\n     , race                    label = '인종'\n     , bad                     label = '채무불이행여부'\n     , bin_loan    as loan     label = '대출금액'\n     , bin_mortdue as mortdue  label = '저당금액'\n     , bin_value   as value    label = '현재자산'\n     , reason                  label = '대출사유'\n     , job                     label = '직업'\n     , bin_yoj     as yoj      label = '현직장근무년수'\n     , bin_derog   as derog    label = '주요부실거래수'\n     , bin_delinq  as delinq   label = '부실거래수'\n     , bin_clage   as clage    label = '가장오래된거래개월수'\n     , bin_ninq    as ninq     label = '최근신용상태조회수'\n     , bin_clno    as clno     label = '금융거래수'\n     , bin_debtinc as debtinc  label = '수입대부채비율(dti)'\n     , _partind_\n  from dmlib.hmeq_comb","outputs":[]},{"kind":1,"language":"markdown","value":"### 2.3. 결과 데이터 CSV로 저장","outputs":[]},{"kind":2,"language":"sas","value":"proc export data= dmlib.hmeq_learn\n    outfile = '/workspaces/svwdemo/result/hmeq_learn.csv'\n    dbms    = csv\n    replace\n    ;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"## 3. 모형 적합","outputs":[]},{"kind":1,"language":"markdown","value":"### 3.1. 변수 역할 할당","outputs":[]},{"kind":2,"language":"sas","value":"%let target         = bad;\n%let interval_input = mortdue value yoj derog delinq clage ninq clno debtinc;\n%let nominal_input  = reason job;\n%let sens_vars      = sex race;\n%let part_vr        = _partind_;","outputs":[]},{"kind":1,"language":"markdown","value":"### 3.2. 모형 적합","outputs":[]},{"kind":1,"language":"markdown","value":"#### 1) Logistic Regression","outputs":[]},{"kind":2,"language":"sas","value":"proc logselect data = dmlib.hmeq_learn;\n    class &nominal_input.;\n    model &target.(event = '1') = &interval_input &nominal_input;\n    partition roleVar = &part_vr.(train='0' valid = '1' test='2'); \n    selection methods = stepwise;\n    output \n        out      = _temp_pred_log_\n        copyVars = ( id &part_vr. &target. &sens_vars. )\n    ;\nrun;\ndata dmlib.hmeq_log_pred;\n    set _temp_pred_log_;\n    p_&target.1 = _pred_;\n    p_&target.0 = 1- _pred_;\n    drop _pred_;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 2) Random Forest","outputs":[]},{"kind":2,"language":"sas","value":"proc forest data = dmlib.hmeq_learn;\n    input  &interval_input / level = interval;\n    input  &nominal_input  / level = nominal;\n    target &target.        / level = nominal;\n    partition roleVar = &part_vr.(train='0' valid = '1' test='2'); \n    output \n        out = dmlib.hmeq_rfm_pred\n        copyVars = ( id &part_vr. &target. &sens_vars. )\n    ;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 3) LightGBM","outputs":[]},{"kind":2,"language":"sas","value":"data dmlib.hmeq_train_learn\n     dmlib.hmeq_valid_learn\n    ;\n    set dmlib.hmeq_learn;\n    if &part_vr. = '0' then output dmlib.hmeq_train_learn;\n    if &part_vr. = '1' then output dmlib.hmeq_valid_learn;\nrun;\nproc LightGradBoost data       = dmlib.hmeq_train_learn\n                    validdata  = dmlib.hmeq_valid_learn\n    ;\n    input &interval_input / level = interval;\n    input &nominal_input  / level = nominal;\n    target &target.       / level = nominal;\n\n    saveState rstore = dmlib.hmeq_lgb_model;\nrun;\nproc astore;\n    score \n        rstore   = dmlib.hmeq_lgb_model\n        data     = dmlib.hmeq_learn\n        out      = dmlib.hmeq_lgb_pred\n        copyVars = ( id &part_vr. &target. &sens_vars. )\n    ;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 4) Support Vector Machine","outputs":[]},{"kind":2,"language":"sas","value":"proc svmachine data   = dmlib.hmeq_learn;\n\n    input  &interval_input / level = interval;\n    input  &nominal_input  / level = nominal;\n    target &target.        / level = nominal;\n\n    partition roleVar = &part_vr.(train='0' valid = '1' test='2'); \n    \n    output \n        out = dmlib.hmeq_svm_pred\n        copyVars = ( id &part_vr. &target. &sens_vars. )\n    ;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 5) Python 모형 적합 절차","outputs":[]},{"kind":2,"language":"sas","value":"/* 주피터 노트북 환경으로 이동 */","outputs":[]},{"kind":1,"language":"markdown","value":"#### 6) Python 모델 적합 결과 가져오기","outputs":[]},{"kind":2,"language":"sas","value":"%let filePath = /workspaces/svwdemo/result;\n  \n%macro csv2ds(fileName=, outData=, filePath=);\nproc import out      = &outData.                      \n            datafile = \"&filePath./&fileName\"\n            dbms     = csv                                              \n            replace\n            ; \n    getnames     = yes;\n    guessingrows = max;\nrun;\ntitle \"Import CSV File: &fileName\";\nproc print data = &outData.(obs = 10) noobs;run;\ntitle;\n%mend csv2ds; \n\n/* CSV to DataSet 매크로 */\n%csv2ds(fileName=hmeq_pyrf_pred.csv, outData=dmlib.hmeq_pyrf_pred , filePath=&filePath.);\n%csv2ds(fileName=hmeq_pygb_pred.csv, outData=dmlib.hmeq_pygb_pred , filePath=&filePath.);","outputs":[]},{"kind":1,"language":"markdown","value":"## 4. 모형 평가","outputs":[]},{"kind":1,"language":"markdown","value":"### 4.1. 모형 성능 평가","outputs":[]},{"kind":1,"language":"markdown","value":"#### 1) 모형 성능 지표 산출","outputs":[]},{"kind":2,"language":"sas","value":"%macro assess_model(prefix=, var_evt=, var_nevt=);\nproc assess data=dmlib.&prefix._pred (where = (_Partind_=1));\n    input &var_evt.;\n    target &target / level=nominal event='1';\n    fitstat pvar=&var_nevt. / pevent='0';\n    \n    ods output\n      fitstat =dmlib.&prefix._fitstat \n      rocinfo =dmlib.&prefix._rocinfo \n      liftinfo=dmlib.&prefix._liftinfo\n      ;\nrun;\n%mend assess_model;\n\nods exclude all;\n%assess_model(prefix=hmeq_log,  var_evt=p_&target.1, var_nevt=p_&target.0);\n%assess_model(prefix=hmeq_rfm,  var_evt=p_&target.1, var_nevt=p_&target.0);\n%assess_model(prefix=hmeq_lgb,  var_evt=p_&target.1, var_nevt=p_&target.0);\n%assess_model(prefix=hmeq_svm,  var_evt=p_&target.1, var_nevt=p_&target.0);\n%assess_model(prefix=hmeq_pygb, var_evt=p_&target.1, var_nevt=p_&target.0);\n%assess_model(prefix=hmeq_pyrf, var_evt=p_&target.1, var_nevt=p_&target.0);\nods exclude none;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 2) ROC, Lift Chart 데이터 생성","outputs":[]},{"kind":2,"language":"sas","value":"data dmlib.all_rocinfo;\n  set dmlib.hmeq_log_rocinfo (in=m1)\n      dmlib.hmeq_rfm_rocinfo (in=m2)\n      dmlib.hmeq_lgb_rocinfo (in=m3)\n      dmlib.hmeq_svm_rocinfo (in=m4)\n      dmlib.hmeq_pygb_rocinfo(in=m5)\n      dmlib.hmeq_pyrf_rocinfo(in=m6)\n  ;\n  length model $ 30;\n  if m1 then model = 'Logistic Regression';\n  if m2 then model = 'Random Forest';\n  if m3 then model = 'Light Gradient Boosting';\n  if m4 then model = 'Support Vector Machine';\n  if m5 then model = 'Python GBM';\n  if m6 then model = 'Python RFM';\nrun;\n\ndata dmlib.all_liftinfo;\n  set dmlib.hmeq_log_liftinfo (in=m1)\n      dmlib.hmeq_rfm_liftinfo (in=m2)\n      dmlib.hmeq_lgb_liftinfo (in=m3)\n      dmlib.hmeq_svm_liftinfo (in=m4)\n      dmlib.hmeq_pygb_liftinfo(in=m5)\n      dmlib.hmeq_pyrf_liftinfo(in=m6)\n  ;\n  length model $ 30;\n  if m1 then model = 'Logistic Regression';\n  if m2 then model = 'Random Forest';\n  if m3 then model = 'Light Gradient Boosting';\n  if m4 then model = 'Support Vector Machine';\n  if m5 then model = 'Python GBM';\n  if m6 then model = 'Python RFM';  \nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 3) ROC, Lift Chart 그리기","outputs":[]},{"kind":2,"language":"sas","value":"/* Draw ROC charts */        \nods graphics on / width=8in height=6in;\nproc sgplot data=dmlib.all_rocinfo aspect=1;\n  title \"ROC Curve (using validation data)\";\n  xaxis values=(0 to 1 by 0.25) grid offsetmin=.05 offsetmax=.05; \n  yaxis values=(0 to 1 by 0.25) grid offsetmin=.05 offsetmax=.05;\n  lineparm x=0 y=0 slope=1 / transparency=.7;\n  series x=fpr y=sensitivity / group=model;\nrun;\n\n/* Draw lift charts */         \nproc sgplot data=dmlib.all_liftinfo; \n  title \"Lift Chart (using validation data)\";\n  yaxis label=' ' grid;\n  series x=depth y=CumLift / group=model markers markerattrs=(symbol=circlefilled);\nrun;\n\ntitle;\nods graphics off;","outputs":[]},{"kind":1,"language":"markdown","value":"### 4.2. 모형 편향 평가","outputs":[]},{"kind":2,"language":"sas","value":"proc assessbias data  = dmlib.hmeq_lgb_pred (where = (&part_vr. = 2))\n                nbins = 20\n    ;\n    var     p_&target.1;\n    target  &target.           / event = \"1\" level = nominal;\n    fitstat pvar = p_&target.0 / pevent =\"0\" ;\n    sensitiveVar race;\nrun;\nproc assessbias data  = dmlib.hmeq_lgb_pred (where = (&part_vr. = 2))\n                nbins = 20\n    ;\n    var     p_&target.1;\n    target  &target.           / event = \"1\" level = nominal;\n    fitstat pvar = p_&target.0 / pevent =\"0\" ;\n    sensitiveVar sex;\nrun;","outputs":[]}]