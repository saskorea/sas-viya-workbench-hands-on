[{"kind":1,"language":"markdown","value":"---\n# <center> <small> 손쉽게 따라하는 SAS Viya Workbench - SAS 사용자편 - </small> </center>\n---","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 1. 환경 설정 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### 1.1. <small> 라이브러리 경로 지정 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"- `sas-viya-workbench-hands-on > 02. SAS 데이터`를 마우스 우클릭\n\n- `Copy Path` 클릭\n\n- 아래 코드의 **`경로 지정`** 부분에 경로 붙여 넣기","outputs":[]},{"kind":2,"language":"sas","value":"LIBNAME WRKLIB \"경로 지정\";","outputs":[]},{"kind":1,"language":"markdown","value":"- 파일 위치: /home/sas/autoexec.sas\n\n- `≡` > `File` > `Open Folder…`\n\n- `Open Folder` 창에서 `/`로 경로를 지정 > `OK` 버튼 클릭\n\n- `Home` > `SAS` > `autoexec.sas` 파일 실행\n\n- `autoexec.sas` 파일 수정\n\n- 파일 수정이 끝나면, 다시 Folder를 `/workspaces/myfolder`로 변경","outputs":[]},{"kind":1,"language":"markdown","value":"---\n## <small> 2. 데이터 가져오기 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 2.1. 데이터 정보 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"**통신 이탈 예측(Churn)**\n\n- **(데이터 정보)** 이 데이터는 **이란의 한 통신사 데이터베이스에서 12개월 동안 무작위로 수집**되었다. 데이터는 **총 3,150개의 행**과 **13개 열**로 구성되어 있으며, **각 행은 고객**을 의미한다. 이 데이터는 '통화 실패, SMS 빈도, 불만 건수, 고유 통화 수, 가입 기간, 연령대, 요금 금액, 서비스 유형, 사용 시간(초), 상태, 사용 빈도, 고객 가치' 변수를 가지고 있다. 이탈(churn) 속성을 제외한 모든 속성은 **처음 9개월 동안 집계**했다. **이탈(churn labels)은 12개월 말의 고객 상태**를 나타낸다. 3개월은 이탈 여부를 판단하기 위한 기간(planning gap)이다.\n- **출처:** Iranian Churn Dataset. UCI Machine Learning Repository. https://archive.ics.uci.edu/dataset/563/iranian+churn+dataset.\n- **라이센스:** Creative Commons Attribution 4.0 International\n- **변경 및 재가공 이력:** 이 데이터는 원본 데이터의 변수명을 변경하였음\n\n- **데이터 정보 개요**\n    | **구분** | **내용** |\n    | --- | --- |\n    | 데이터 이름 | Churn |\n    | 영역 | 통신 |\n    | 관련 주제 | 분류 |\n    | 관측 단위 | 고객 |\n    | 관측치 수 | 3,150 |\n    | 입력 | 13 |\n    | 타겟 | Churn (Binary) |\n\n\n","outputs":[]},{"kind":1,"language":"markdown","value":"- **메타 데이터**\n\n\n    | **No** | **컬럼** | **한글명** | **설명** | **역할** | **유형** |\n    | --- | --- | --- | --- | --- | --- |\n    | 1 | CallFail | 통화 실패 | 통화 실패 횟수 | 입력 | num |\n    | 2 | Complaints | 불만 여부 | 고객 불만 상태 (0: 없음, 1: 있음) | 입력 | char |\n    | 3 | SubLength | 가입 기간 | 총 가입 기간(개월) | 입력 | num |\n    | 4 | ChargeAmt | 요금 수준 | 고객 요금 수준 (0: 최저 금액, 9: 최고 금액) | 입력 | num |\n    | 5 | SecOfUse | 통화 시간 | 총 통화 시간(초) | 입력 | num |\n    | 6 | FreqOfUse | 통화 횟수 | 총 통화 횟수 | 입력 | num |\n    | 7 | FreqSMS | 문자 횟수 | 총 문자 메시지 발송 횟수 | 입력 | num |\n    | 8 | DistCallNum | 고유 통화 수 | 고유 통화 상대방 수 | 입력 | num |\n    | 9 | ~~AgeGroup~~ | 연령대 | 연령대 (1: 젊은 연령, 5: 고령) | 제외 | num |\n    | 10 | TariffPlan | 요금제 | 고객의 요금제 유형 (1: 선불, 2: 계약) | 입력 | char |\n    | 11 | Status | 상태 | 고객 현재 상태 (1: 활성, 2: 비활성) | 입력 | char |\n    | 12 | Age | 연령 | 고객 연령 | 입력 | num |\n    | 13 | CustValue | 고객 가치 | 고객 가치 계산 값 | 입력 | num |\n    | 14 | Churn | 이탈 여부 | 이탈 여부 (1: 이탈, 0: 유지) | 타겟 | char |\n","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 2.2. 파일 읽기 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC IMPORT DATAFILE = \"sas-viya-workbench-hands-on/01. RAW 데이터/churn.csv\"   /* 가져올 데이터 이름(경로) */\n            DBMS     = CSV                                                     /* 가져올 데이터 파일 유형(엑셀은 XLSX) */\n            OUT      = CHURN                                                   /* 저장할 데이터 이름 */\n            REPLACE                                                            /* 같은 데이터가 이미 있으면, 신규 데이터로 대체 */\n            ;\n    GETNAMES     = YES;   /* 데이터의 첫 줄이 변수명인 경우 */\n    GUESSINGROWS = 300;   /* 각 컬럼의 크기 및 타입을 정하기 위해 확인할 데이터 수 */\nRUN;\nTITLE \"가져온 데이터 상위 10개 출력\";\nPROC PRINT DATA = CHURN(OBS = 10) NOOBS;\nRUN;\nTITLE;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 2.3. 데이터 가독성 높이기 </small> ","outputs":[]},{"kind":1,"language":"markdown","value":"`ATTRIB`을 이용하여, 각 변수에 `LABEL`과 `FORMAT`을 부여","outputs":[]},{"kind":2,"language":"sas","value":"DATA WRKLIB.CHURN;\n\n    ATTRIB\n        ID                              LABEL = '고객번호'\n        CallFail\tFORMAT = BEST8.     LABEL = '통화실패횟수'       \n        Complains\tFORMAT = BEST8.     LABEL = '불만여부'\n        SubLength\tFORMAT = BEST8.     LABEL = '가입기간(개월)'\n        ChargeAmt\t                    LABEL = '요금수준'\n        SecOfUse\tFORMAT = COMMA8.    LABEL = '통화시간' \n        FreqOfUse\tFORMAT = BEST8.     LABEL = '통화횟수'\n        AvgCallDur  FORMAT = COMMA8.2   LABEL = '평균통화시간'\n        FreqSMS     FORMAT = BEST8.     LABEL = '문자횟수'\n        DistCallNum FORMAT = BEST8.     LABEL = '고유통화수'\n        TariffPlan                      LABEL = '요금제'\n        Status                          LABEL = '상태'\n        Age                             LABEL = '연령'\n        CustValue\tFORMAT = COMMA8.2   LABEL = '고객가치'\n        Churn                           LABEL = '이탈여부'\n    ;\n\n    SET CHURN;\n    ID = PUT(_N_, Z5.);\n\n    /* 간단한 파생 변수 */\n    IF FreqOfUse > 0 THEN AvgCallDur = SecOfUse / FreqOfUse;\n    ELSE AvgCallDur = 0;\n\n    DROP AgeGroup; /* 연령그룹 변수 제외 */\nRUN;\nTITLE \"Format 및 Label 할당 결과, 상위 10개 출력\";\nPROC PRINT DATA = WRKLIB.CHURN(OBS = 10) NOOBS LABEL;\nRUN;\nTITLE;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 2.4. Snippet 등록 하기 </small>\n\n- '06. 손쉽게 따라하는 SVW 핸즈온 > Snippet 실습' 파일 내용을 복사\n- `Manage` (화면, 왼쪽 하단의 톱니바퀴 아이콘) 클릭\n- 각 Snippet을 모두 따로 등록하여야 함 (local)\n","outputs":[]},{"kind":2,"language":"sas","value":"### 스니펫 구조\n\n{\n\t\"스니펫 이름\": {\n\t\"prefix\": \"스니펫을 호출할 때 사용할 단축어\",\n\t\"body\": [\n\t\t\"코드의 각 줄을 문자열로 작성\",\n\t\t\"필요에 따라 여러 줄 추가\"\n\t],\n\t\"description\": \"스니펫에 대한 설명\"\n\t}\n}","outputs":[]},{"kind":2,"language":"sas","value":"/* numvars */\n","outputs":[]},{"kind":2,"language":"sas","value":"/* charvars */","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 3. 데이터 탐색  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 3.1. 수치형 변수 탐색 </small> ","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 1) 간단한 통계 </small> \n\n* 코드 실행 후, `htm` 살펴보기","outputs":[]},{"kind":2,"language":"sas","value":"PROC MEANS DATA   = WRKLIB.CHURN  /* 입력 데이터 */\n           MAXDEC = 2             /* 출력할 소숫점 자리수 */\n           N NMISS VAR STD KURT SKEW MIN Q1 MEAN MEDIAN Q3 MAX\n           ;\n    VAR \n        CallFail\n        SubLength\n        SecOfUse\n        FreqOfUse\n        AvgCallDur\n        FreqSMS\n        DistCallNum\n        Age\n        CustValue\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 2) 다양한 통계 </small> ","outputs":[]},{"kind":2,"language":"sas","value":"PROC UNIVARIATE DATA = WRKLIB.CHURN;\n    VAR CallFail;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### 3) 수치형 변수들 간의 관계","outputs":[]},{"kind":2,"language":"sas","value":"PROC CORRELATION DATA = WRKLIB.CHURN;\n    VAR\n        CallFail\t\n        SubLength\t\n        SecOfUse\t\n        FreqOfUse\n        FreqSMS\n        AvgCallDur\n        DistCallNum \n        Age         \n        CustValue\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"**제외 대상**\n- FreqOfUse (제외) -> SecOfUse\n- FreqSMS (제외) -> CustValue","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 3.2. 범주형 변수 탐색 </small> ","outputs":[]},{"kind":2,"language":"sas","value":"PROC FREQ DATA    = WRKLIB.CHURN\n          ORDER   = FREQ        /* 빈도가 높은 순으로 */\n          NLEVELS               /* 각 범주형 변수의 수준수 출력 */\n          ;\n    TABLES \n        /* 범주형 변수 리스트 */\n        Complains\n        ChargeAmt\n        TariffPlan\n        Status\n        Churn\n        / MISSING /* 결측도 하나의 LEVEL로 취급 */\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 4. 데이터 분할  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 4.1. Partition을 활용한 데이터 분할  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"- 학습(Training), 평가(Validation), 검증(Testing) 데이터를 각 **4:3:3** 비율로 분할","outputs":[]},{"kind":2,"language":"sas","value":"PROC PARTITION DATA     = WRKLIB.CHURN   /* 입력 데이터 */\n               SAMPPCT  = 30             /* 두 번째 SAMPLE의 크기(비율) 30% */\n               SAMPPCT2 = 30             /* 세 번째 SAMPLE의 크기(비율) 30% */\n               SEED     = 123123         /* Random Seed 재현이 필요한 경우 유용 */\n               PARTIND                   /* 데이터 분할 색인을 이용하여, 분할 */\n               ;\n    BY CHURN;                               /* 타겟 변수 */\n    OUTPUT \n        OUT        = WRKLIB.CHURN_PARTED    /* 데이터 분할 결과 테이블 */\n        COPYVARS   = (_ALL_)                /* 결과 테이블에 포함할 변수 지정 */\n        PARTINDNAME= _PARTITION_            /* PARTITION 변수 이름 */\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 4.2. 데이터 분할 결과 확인  </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC FREQ DATA = WRKLIB.CHURN_PARTED;\n    TABLE _PARTITION_ * CHURN/ NOCUM;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 5. 데이터 처리  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 5.1. 수치형 변수 구간화 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC BINNING DATA   = WRKLIB.CHURN_PARTED\n             METHOD = TREE (\n                           MINNBINS = 2  /* 최소 범주 수 */\n                           MAXNBINS = 20 /* 최대 범주 수 */\n                           )\n             ;\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\n           AvgCallDur\t\n           DistCallNum \n           Age         \n           CustValue / LEVEL = INTERVAL;\n    TARGET CHURN     / LEVEL = NOMINAL;\n    OUTPUT \n        OUT      = WRKLIB.CHURN_BIN\n        COPYVARS = (_ALL_)\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 5.2. 구간화 데이터 이름 변경(SQL 코드) </small>","outputs":[]},{"kind":2,"language":"sql","value":"CREATE TABLE WRKLIB.CHURN_MDL_MART AS\nSELECT ID                             LABEL = '고객ID'\n     , Complains                      LABEL = '불만여부'\n     , ChargeAmt                      LABEL = '요금수준'\n     , TariffPlan                     LABEL = '요금제'\n     , Status                         LABEL = '상태'\n     , BIN_CallFail    AS CallFail    LABEL = '통화실패횟수그룹' \n     , BIN_SubLength   AS SubLength   LABEL = '가입기간그룹'\n     , BIN_SecOfUse    AS SecOfUse    LABEL = '통화시간그룹'\n     , BIN_AvgCallDur  AS AvgCallDur  LABEL = '평균통화시간그룹'\n     , BIN_DistCallNum AS DistCallNum LABEL = '고유통화수그룹'\n     , BIN_Age         AS Age         LABEL = '연령그룹'\n     , BIN_CustValue   AS CustValue   LABEL = '고객가치그룹'\n     , _PARTITION_                    LABEL = '데이터역할'\n     , CHURN                          LABEL = '이탈여부'\n  FROM WRKLIB.CHURN_BIN\n;","outputs":[]},{"kind":2,"language":"sql","value":"SELECT * FROM WRKLIB.CHURN_MDL_MART(OBS = 10);","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 6. 모형 적합  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 6.1. 의사결정나무 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC TREESPLIT DATA = WRKLIB.CHURN_PARTED;\n\n    /* 수치형 입력 변수 */\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\n           AvgCallDur\n           DistCallNum \n           Age         \n           CustValue    \n           / LEVEL = INTERVAL\n    ;\n\n    /* 범주형 입력 변수 */\n    INPUT  Complains\n           ChargeAmt\n           TariffPlan\n           Status       \n           / LEVEL = NOMINAL\n    ;\n\n    /* 타겟 변수 */\n    TARGET CHURN \n            / LEVEL = NOMINAL\n    ;\n\n    /* 데이터 분할 */\n    PARTITION \n       ROLEVAR = _PARTITION_ (TRAIN = '0' VALID = '1' TEST = '2')\n    ;\n\n    /* 결과 출력 */\n    OUTPUT \n        OUT      = WRKLIB.CHURN_DTR /* 데이터 */\n        COPYVARS = ( _ALL_ )        /* 포함할 변수 */\n    ;\n    \nRUN;","outputs":[]},{"kind":2,"language":"sas","value":"PROC PRINT DATA = WRKLIB.CHURN_DTR(OBS = 10) NOOBS;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 6.2. 랜덤포레스 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"- **입력 데이터:** WRKLIB.CHURN_PARTED\n- **수치형 입력 변수:** CallFail SubLength SecOfUse AvgCallDur DistCallNum Age CustValue\n- **범주형 입력 변수:** Complains ChargeAmt TariffPlan Status\n- **타겟 변수:** CHURN\n- **결과 데이터:** WRKLIB.CHURN_RFM","outputs":[]},{"kind":2,"language":"sas","value":"PROC FOREST DATA = ; /* 입력 데이터 */\n    INPUT   / LEVEL = INTERVAL; /* 수치형 입력 변수 */\n    INPUT   / LEVEL = NOMINAL;  /* 명목형 입력 변수 */\n    TARGET CHURN / LEVEL = NOMINAL;  /* 타겟 변수 */\n    PARTITION ROLEVAR = _PARTITION_ (TRAIN = '0' VALID = '1' TEST = '2');\n    OUTPUT OUT =  /* 결과 데이터 */\n        COPYVARS = ( _ALL_ );\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 6.3. 로지스틱회귀 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC LOGSELECT DATA = WRKLIB.CHURN_MDL_MART;\n\n    /* 범주형 변수 */\n    CLASS Complains ChargeAmt TariffPlan Status \n          CallFail SubLength SecOfUse AvgCallDur DistCallNum Age CustValue\n          CHURN\n    ;\n    \n    /* 모형 구조 정의 */\n    MODEL CHURN(EVENT = '1')                                                        \n        =  CallFail SubLength SecOfUse AvgCallDur DistCallNum Age CustValue\n           ChargeAmt TariffPlan Status\n        / NOINT\n    ;\n\n    /* 데이터 분할 */\n    PARTITION \n        ROLEVAR = _PARTITION_ ( TRAIN = '0' VALID = '1' TEST = '2' )\n    ;\n\n    /* 변수 선택 */\n    SELECTION\n        METHOD = FORWARD /* 전진 선택 */ \n    ;\n\n    /* 결과 데이터 */\n    OUTPUT\n        OUT      = _TEMP_PRED_LOG_  /* 예측 결과를 저장할 데이터 이름 */\n        COPYVARS = ( _ALL_ )\n    ;\n\nRUN;","outputs":[]},{"kind":2,"language":"sas","value":"PROC PRINT DATA = _TEMP_PRED_LOG_(OBS = 5) NOOBS;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"데이터 구조 변경","outputs":[]},{"kind":2,"language":"sas","value":"DATA WRKLIB.CHURN_LOG;\n    SET _TEMP_PRED_LOG_;\n    P_CHURN1 = _PRED_;\n    P_CHURN0 = 1 - _PRED_;\n    DROP _PRED_;\nRUN;","outputs":[]},{"kind":2,"language":"sas","value":"/* 결과 살펴 보기 */","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 6.4. 지지벡터머신 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC SVMACHINE DATA = WRKLIB.CHURN_PARTED;\n\n    /* 수치형 입력 변수 */\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\n           DistCallNum \n           Age         \n           CustValue    \n           / LEVEL = INTERVAL\n    ;\n\n    /* 범주형 입력 변수 */\n    INPUT  Complains\n           ChargeAmt\n           TariffPlan\n           Status       \n           / LEVEL = NOMINAL\n    ;\n\n    /* 타겟 변수 */\n    TARGET CHURN \n            / LEVEL = NOMINAL\n    ;\n\n    /* 데이터 분할 */\n    PARTITION \n       ROLEVAR = _PARTITION_ (TRAIN = '0' VALID = '1' TEST = '2')\n    ;\n\n    /* 결과 출력 */\n    OUTPUT \n        OUT      = WRKLIB.CHURN_SVM /* 데이터 */\n        COPYVARS = ( _ALL_ )        /* 포함할 변수 */\n    ;\n    \nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 6.5. 그레디언트부스팅 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC GRADBOOST DATA = WRKLIB.CHURN_PARTED;\n\n    /* 수치형 입력 변수 */\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\n           AvgCallDur\n           DistCallNum \n           Age         \n           CustValue    \n           / LEVEL = INTERVAL\n    ;\n\n    /* 범주형 입력 변수 */\n    INPUT  Complains\n           ChargeAmt\n           TariffPlan\n           Status       \n           / LEVEL = NOMINAL\n    ;\n\n    /* 타겟 변수 */\n    TARGET CHURN \n            / LEVEL = NOMINAL\n    ;\n\n    /* 데이터 분할 */\n    PARTITION \n       ROLEVAR = _PARTITION_ (TRAIN = '0' VALID = '1' TEST = '2')\n    ;\n\n    /* 결과 출력 */\n    OUTPUT \n        OUT      = WRKLIB.CHURN_GBM /* 데이터 */\n        COPYVARS = ( _ALL_ )        /* 포함할 변수 */\n    ;\n\n    /* 모형 저장 */\n    SAVESTATE \n        RSTORE = WRKLIB.CHURN_GBM_MODEL\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 7. 모형 평가  </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 7.1. 모형 평가 지표 생성 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 1) 매크로 정의 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"| **입력 파라미터** | **설명** |\n| --- | --- |\n| **SOURCE_TABLE** | 입력 데이터 |\n| **TARGET_NM** | 타겟 변수 이름 |\n| **MODEL_INDEX** | 모형 인덱스 (예: LOG) |","outputs":[]},{"kind":2,"language":"sas","value":"%MACRO ASSESS_MODEL(SOURCE_TABLE=, TARGET_NM=, MODEL_INDEX=);\nODS EXCLUDE ALL;\n\nPROC ASSESS DATA = &SOURCE_TABLE.;\n    BY     _PARTITION_;\n    INPUT  P_&TARGET_NM.1;\n    TARGET &TARGET_NM. / LEVEL=NOMINAL EVENT='1';\n    FITSTAT PVAR = P_&TARGET_NM.0 / PEVENT='0';\n\n    ODS OUTPUT\n      FITSTAT  = __FIT__&MODEL_INDEX. /* 적합 통계량  */\n      ROCINFO  = __ROC__&MODEL_INDEX. /* ROC 정보    */\n      LIFTINFO = __LFT__&MODEL_INDEX. /* 향상도 정보  */\n      ;\n\nRUN;\n\nODS EXCLUDE NONE;\n\n%MEND ASSESS_MODEL;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 2) 평가 지표 생성 </small>","outputs":[]},{"kind":2,"language":"sas","value":"%ASSESS_MODEL(SOURCE_TABLE = WRKLIB.CHURN_DTR, TARGET_NM = CHURN, MODEL_INDEX = DTR);\n%ASSESS_MODEL(SOURCE_TABLE = WRKLIB.CHURN_LOG, TARGET_NM = CHURN, MODEL_INDEX = LOG);\n%ASSESS_MODEL(SOURCE_TABLE = WRKLIB.CHURN_RFM, TARGET_NM = CHURN, MODEL_INDEX = RFM);\n%ASSESS_MODEL(SOURCE_TABLE = WRKLIB.CHURN_SVM, TARGET_NM = CHURN, MODEL_INDEX = SVM);\n%ASSESS_MODEL(SOURCE_TABLE = WRKLIB.CHURN_GBM, TARGET_NM = CHURN, MODEL_INDEX = GBM);","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 3) 모형별 결과 종합 </small>","outputs":[]},{"kind":2,"language":"sas","value":"/* 적합 통계량 */\nDATA WRKLIB.CHURN_FIT;\n    LENGTH MODEL $ 5;\n    SET __FIT__: INDSNAME = MEMNAME;\n    MODEL = SCAN( MEMNAME, 3, '__');\nRUN;\n\n/* ROC 그래프 */\nDATA WRKLIB.CHURN_ROC;\n    LENGTH MODEL $ 5;\n    SET __ROC__: INDSNAME = MEMNAME;\n    MODEL = SCAN( MEMNAME, 3, '__');\nRUN;\n\n/* 향상도 그래프 */\nDATA WRKLIB.CHURN_LFT;\n    LENGTH MODEL $ 5;\n    SET __LFT__: INDSNAME = MEMNAME;\n    MODEL = SCAN( MEMNAME, 3, '__');\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 7.2. 결과 시각화 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 1) 모형 성능 지표 </small>","outputs":[]},{"kind":2,"language":"sas","value":"TITLE \"모형 성능 지표\";\nPROC PRINT DATA = WRKLIB.CHURN_FIT LABEL;\nRUN;\nTITLE;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 2) ROC 그래프 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"- SAS Code Block을 생성\n- \"sasroc\" 입력 후 스니펫 선택\n- '[입력]'이라고 되어 있는 부분을 채우고 코드 실행\n","outputs":[]},{"kind":2,"language":"sas","value":"","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 3) 향상도 그래프 </small>","outputs":[]},{"kind":2,"language":"sas","value":"ODS GRAPHICS ON / WIDTH=12IN HEIGHT=7IN;\n\nTITLE \"향상도 그래프\";\n\nPROC SGPANEL DATA   = WRKLIB.CHURN_LFT;\n\n    /* 각 분류 모형별 */\n    PANNELBY MODEL;\n\n    /* 향상도 그래프 */\n    SERIES\n        X = DEPTH             /* X축 깊이 */\n        Y = CUMLIFT           /* Y축 누적향상도 */\n        / GROUP = _PARTITION_ /* 각 데이터 역할별로 향상도 그래프를 나누어 그림 */\n    ;\nRUN;\n\nTITLE;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 4) 각 모형별 상위 5% 누적 향상도 </small>","outputs":[]},{"kind":2,"language":"sql","value":"SELECT MODEL\n     , MAX(CASE WHEN _PARTITION_ = 0 THEN CUMLIFT ELSE . END) AS TRAIN\n     , MAX(CASE WHEN _PARTITION_ = 1 THEN CUMLIFT ELSE . END) AS VALID\n     , MAX(CASE WHEN _PARTITION_ = 2 THEN CUMLIFT ELSE . END) AS TEST\n  FROM WRKLIB.CHURN_LFT\n WHERE DEPTH = 10    /* 상위 10% 누적 향상도 기준 */\n GROUP BY MODEL\n ORDER BY VALID DESC /* 평가용 데이터 기준 성능 평가 */","outputs":[]},{"kind":1,"language":"markdown","value":"## <small> 8.심화 과정 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 8.1. 데이터 증강 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"**GMM을 사용해 데이터의 잠재 분포를 클러스터별로 분리하여 GAN 학습 과정을 개선**\n- `ALPHA`와 `MAXCLUSTERS`는 클러스터링의 세분화 수준과 최대 클러스터 개수를 조정\n- 변분 베이즈(`VB`)를 사용해 GMM의 성능을 최적화\n\n**AutoEncoder 및 GAN 학습**\n- `AutoEncoder`: 데이터 압축 및 복원을 통해 잠재 공간을 학습\n- `GAN`: 실제 데이터와 유사한 데이터를 생성하도록 학습\n\n**학습 파라미터**\n- `EMBEDDINGDIM`: 잠재 공간 차원 수를 정의하여 데이터의 복잡성을 조정\n- `MINIBATCHSIZE`: 한 번의 반복에서 처리할 데이터 샘플 수","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 1) 학습용 코드 (실행 시간 대략 10분 이상 소요) </small> **<small>`실행금지`</small>**","outputs":[]},{"kind":2,"language":"sas","value":"\nPROC TABULARGAN DATA       = WRKLIB.CHURN   /* 입력 데이터 */\n                SEED       = 11231231       /* 랜덤 시드   */\n                NUMSAMPLES = 100            /* 증강할 데이터 갯수 */\n                ;\n      \n    /* 수치형 입력 변수 */\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\n           AvgCallDur\n           DistCallNum \n           Age         \n           CustValue    \n           / LEVEL = INTERVAL\n    ;\n\n    /* 범주형 입력 변수 */\n    INPUT  Complains\n           ChargeAmt\n           TariffPlan\n           Status \n           CHURN\n           / LEVEL = NOMINAL\n    ;\n      \n    /* GMM(Gaussian Mixture Model) 설정 */\n    GMM                 ALPHA       = 1             /* GMM의 Dirichlet 분포 초매개변수: 클러스터 혼합 정도 조정 */\n                        MAXCLUSTERS = 10            /* 최대 클러스터 개수 */\n                        SEED        = 42            /* GMM 초기화에 사용할 랜덤 시드 */\n                        VB(MAXVBITER=30)            /* 변분 베이즈 최적화(VB) 사용, 최대 30회 반복 */\n    ;\n\n    /* AutoEncoder 학습 파라미터 정의 */\n    AEOPTIMIZATION      ADAM                        /* ADAM 최적화 알고리즘 사용 */\n                        LEARNINGRATE = 0.0001       /* 학습 속도 */\n                        NUMEPOCHS    = 3            /* AutoEncoder 학습 반복 수 (Epochs) */\n    ;\n\n    /* GAN 학습 파라미터 정의 */\n    GANOPTIMIZATION     ADAM(BETA1=0.55 BETA2=0.95) /* ADAM 최적화 알고리즘의 Beta1, Beta2 값 조정 */   \n                        NUMEPOCHS     = 5           /* GAN 학습 반복 수 */\n    ;\n\n    /* 모델 학습 파라미터 정의 */\n    TRAIN               EMBEDDINGDIM  = 64          /* 잠재 공간의 임베딩 차원 크기 */\n                        MINIBATCHSIZE = 300         /* 미니배치 크기 */\n                        USEORIGLEVELFREQ            /* 원래 데이터의 레벨 빈도를 유지 */\n    ;\n\n    SAVESTATE           RSTORE = WRKLIB.CHURN_CPCTGAN_MODEL;  /* 학습된 모델 저장 위치 지정 */\n    OUTPUT              OUT    = WRKLIB.CHURN_AUGMTED;        /* 증강된 데이터를 저장할 출력 데이터셋 */\nRUN;","outputs":[]},{"kind":2,"language":"sas","value":"PROC PRINT DATA = WRKLIB.CHURN_AUGMTED (OBS = 10) NOOBS;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 2) 스코어링 코드 </small>\n이미 학습한 데이터 증강 모형 `CPCTGAN`을 불러와 새로운 데이터 증강에만 활용","outputs":[]},{"kind":2,"language":"sas","value":"DATA _TEMP_INPUT_;\n    DO ID = 1 TO 100; /* 증강할 데이터 수 */\n        OUTPUT;\n    END;\nRUN;\nPROC ASTORE;\n    SCORE RSTORE= WRKLIB.CHURN_CPCTGAN_MODEL\n          DATA  = _TEMP_INPUT_\n          OUT   = WRKLIB.CHURN_AUGMTED_100\n    ;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 8.2. 상품추천 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 1) 데이터 가져오기 </small>","outputs":[]},{"kind":1,"language":"markdown","value":"`usersCommunity.csv` 데이터 설명\n\n| **항목**              | **설명**                                                                                 |\n|-----------------------|-----------------------------------------------------------------------------------------|\n| **데이터 세트 내용**   | 피어 투 피어 지원 커뮤니티 웹사이트에서 일정 기간 동안의 클릭 이벤트 포함                    |\n| **웹 페이지(아이템) 구성** | 각 웹 페이지는 특정 관심 주제를 포함하는 메시지 게시판에 속함                                     |\n| **사용자 행동**        | 동일 사용자가 동일 웹 페이지를 여러 번 조회했을 가능성 있음                                       |\n| **추가 정보**          | 주제 내 질문 해결 여부가 데이터 세트에 표시됨(isSolvedTopic 변수)                        |\n| **기록 데이터**        | 클릭 이벤트마다 사용자 ID와 아이템 ID가 기록됨                                                  |\n| **규모**              | 총 40,000개의 클릭 이벤트(관찰값) 포함                                                       |","outputs":[]},{"kind":2,"language":"sas","value":"PROC IMPORT DATAFILE = \"sas-viya-workbench-hands-on/01. RAW 데이터/usersCommunity.csv\"   /* 가져올 데이터 이름(경로) */\n            DBMS     = CSV                                                               /* 가져올 데이터 파일 유형(엑셀은 XLSX) */\n            OUT      = USERSCOMMUNITY                                                    /* 저장할 데이터 이름 */\n            REPLACE                                                                      /* 같은 데이터가 이미 있으면, 신규 데이터로 대체 */\n            ;\n    GETNAMES     = YES;   /* 데이터의 첫 줄이 변수명인 경우 */\n    GUESSINGROWS = 300;   /* 각 컬럼의 크기 및 타입을 정하기 위해 확인할 데이터 수 */\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 2) 가져온 데이터 상위 10개 출력 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC PRINT DATA = USERSCOMMUNITY(OBS = 10) NOOBS;\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 3) 상품추천 모형 구축 </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC RECENGINE DATA     = USERSCOMMUNITY\n               METHOD   = DTOS\n               OUTMODEL = FACTORS\n               ;\n    /* RECENGINE 프로시저를 USERSCOMMUNITY 데이터셋으로 시작합니다. */\n    /* METHOD=DTOS는 사용되는 행렬 분해 알고리즘을 Direct to Sparse matrix로 설정합니다. */\n    /* OUTMODEL=FACTORS는 결과 행렬 모델을 FACTORS 테이블에 저장합니다. */\n\n    INPUT  USERID            /* 고객ID */\n           ITEMID            /* 상품ID */\n           / LEVEL=NOMINAL\n    ;\n    /* INPUT 문에서 USERID와 ITEMID를 입력 변수로 정의합니다. */\n    /* LEVEL=NOMINAL은 이 변수가 범주형(명목형)임을 나타냅니다. */\n\n    INPUT  isSolvedTopic     /* 해결 여부 */\n           / LEVEL=INTERVAL\n    ;\n    /* 또 다른 INPUT 문에서 isSolvedTopic 변수를 입력 변수로 정의합니다. */\n    /* 이 변수는 연속형 값(예: 점수나 피드백 수치)을 나타냅니다. */\n\n    USERID USERID;\n    ITEMID ITEMID;\n    /* USERID와 ITEMID를 사용자와 아이템의 고유 식별자로 명시적으로 정의합니다. */\n\n    DTOS \n        NFACTORS                = 12            /* 행렬 분해에서 사용할 잠재 요인(factors) 개수를 설정합니다. */\n        MAXITER                 = 20            /* 반복(iteration) 횟수를 최대 20으로 설정합니다. */\n        REGL2                   = 0.1           /* 모델의 가중치에 대해 L2 정규화를 적용할 때의 파라미터 값을 설정합니다. */\n        Confidence              = isSolvedTopic /* 명시적으로 isSolvedTopic 변수로 신뢰도를 설정합니다. */\n   ;\n   /* DTOS 블록은 행렬 분해의 다양한 파라미터를 설정합니다. */\n\n  SAVESTATE RSTORE = ASTOREMODEL;\n  /* SAVESTATE 문은 모델의 상태를 저장하여 추후 분석이나 스코어링(scoring)에 사용할 수 있도록 합니다. */\n  /* RSTORE=ASTOREMODEL은 저장된 모델을 ASTOREMODEL 테이블에 저장합니다. */\nRUN;","outputs":[]},{"kind":1,"language":"markdown","value":"#### <small> 4) 상품추천 모형 테스트 </small>","outputs":[]},{"kind":2,"language":"sas","value":"/* USER ID 2572 추출 */\nDATA USER2572;\n   INPUT   USERID;\n   DATALINES;\n   2572\n   ;\nRUN;\n\n/* USER2572 에 대해 상위 5개의 추천 ITEM 데이터 생성 */\nPROC ASTORE;\n   SETOPTION NTOPRECOMS 5;\n   SCORE \n       DATA   = USER2572 \n       RSTORE = ASTOREMODEL \n       OUT    = RANKEDITEMSDTOS\n       ;\n   RUN;\nQUIT;\n\n/* 추천된 ITEM 확인 */\nTITLE \"USER ID 2572 의 추천 ITEM TOP 5\";\nPROC PRINT DATA = RANKEDITEMSDTOS;\nRUN;\nTITLE;","outputs":[]},{"kind":1,"language":"markdown","value":"### <small> 8.3. 설명 가능 AI (PD 도표) </small>","outputs":[]},{"kind":2,"language":"sas","value":"PROC PARTIALDEPEND DATA = WRKLIB.CHURN_GBM\n                   SEED = 1234\n   ;\n\n    /* 수치형 입력 변수 */\n    INPUT  CallFail\t\n           SubLength\t\n           SecOfUse\t \n           DistCallNum\n           AvgCallDur\n           Age         \n           CustValue    \n           / LEVEL = INTERVAL\n    ;\n\n    /* 범주형 입력 변수 */\n    INPUT  Complains\n           ChargeAmt\n           TariffPlan\n           Status       \n           / LEVEL = NOMINAL\n    ;\n\n\n   /* 예측 타겟 변수 정의 */\n   PREDICTEDTARGET P_CHURN1;                    /* 모델에서 예측한 타겟 값 */\n\n   /* 분석할 주요 변수 지정 */\n   ANALYSISVARIABLE CallFail;                      \n\n   /* 저장된 모델 참조 */\n   ASTOREMODEL\n        RSTORE = WRKLIB.CHURN_GBM_MODEL;        /* 저장된 모델 로드 */\n\nRUN;","outputs":[]}]